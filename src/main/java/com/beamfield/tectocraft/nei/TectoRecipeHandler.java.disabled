package com.beamfield.tectocraft.nei;

import java.util.Map;

import com.beamfield.tectocraft.TectoCraft;
import com.beamfield.tectocraft.reference.Reference;

import net.minecraft.client.gui.inventory.GuiContainer;
import net.minecraft.item.ItemStack;
import net.minecraft.util.ResourceLocation;
import codechicken.nei.NEIServerUtils;
import codechicken.nei.PositionedStack;
import codechicken.nei.recipe.TemplateRecipeHandler;
public abstract class TectoRecipeHandler extends TemplateRecipeHandler{

	 @Override
	    public abstract String getRecipeName();
	    
	    @Override
	    public abstract String getOverlayIdentifier();
	    
	    @Override
	    public abstract Class<? extends GuiContainer> getGuiClass();
	    
	    @Override
	    public abstract void loadTransferRects();
	    
	    public abstract float getWattsPerTick();
	    
	    public abstract Map<ItemStack, int[]> getRecipes();
	    
	    @Override
	    public String getGuiTexture()
	    {
	    	return new ResourceLocation("tectocraft", Reference.MODID + ":" + "textures/gui/GuiTectoCrafter.png").toString();
	    }
	    
	    @Override
	    public void loadCraftingRecipes(String outputId, Object... results)
	    {  
	            super.loadCraftingRecipes(outputId, results);	     
	    }
	    
	    @Override
	    public void loadCraftingRecipes(ItemStack result)
	    {
	        for (Map.Entry<ItemStack, int[]> recipe : this.getRecipes().entrySet())
	        {
	           // ItemStack item = new ItemStack(recipe.getValue()[0], recipe.getValue()[1], recipe.getValue()[2]);
	           
	           // if (NEIServerUtils.areStacksSameTypeCrafting(item, result))
	            {
	                
	            }
	        }
	        
	    }
	    
	    @Override
	    public void loadUsageRecipes(ItemStack ingredient)
	    {
	        boolean woolAdded = false;
	        for (Map.Entry<ItemStack, int[]> recipe : this.getRecipes().entrySet())
	        {
	           
	            if (NEIServerUtils.areStacksSameTypeCrafting(recipe.getKey(), ingredient))
	            {
	            }
	            
	        }
	        
	    }
	    
	    @Override
	    public void drawExtras(int recipe)
	    {
	    }
	    
	    public class EEMachineRecipe extends TemplateRecipeHandler.CachedRecipe
	    {
	        
	        private PositionedStack input;
	        private PositionedStack output;
	        private float energy;
	        
	        public float getEnergy()
	        {
	            return energy;
	        }
	        
	        @Override
	        public PositionedStack getResult()
	        {
	            return output;
	        }
	        
	        @Override
	        public PositionedStack getIngredient()
	        {
	           
	            return input;
	        }
	        
	        public EEMachineRecipe(Map.Entry<ItemStack, int[]> recipe, float wattsPerTick)
	        {
	            this.input = new PositionedStack(recipe.getKey(), 50, 14);
	           // this.output = new PositionedStack(new ItemStack(null), 103, 14);
	            this.energy = recipe.getValue()[3] * wattsPerTick;
	        }
	    }

}
